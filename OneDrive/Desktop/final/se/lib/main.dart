import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart';

// If you used FlutterFire CLI and have firebase_options.dart, uncomment:
// import 'firebase_options.dart';

import 'services/auth_service.dart';
import 'screens/login_phone.dart';
import 'screens/role_select.dart';
import 'screens/driver_home.dart';
import 'screens/rider_home.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase (if you generated firebase_options.dart you can pass options)
  try {
    // If you have firebase_options.dart generated by `flutterfire configure`,
    // replace the next line with:
    // await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
    await Firebase.initializeApp();
  } catch (e, st) {
    // Initialization might already be done elsewhere or options missing â€” log and continue.
    debugPrint('Firebase.initializeApp() error: $e\n$st');
  }

  runApp(
    ChangeNotifierProvider(
      create: (_) => AuthService()..init(),
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final auth = Provider.of<AuthService>(context);

    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Campus Ride',
      theme: ThemeData(
        primarySwatch: Colors.deepPurple,
        // keep theme similar to what you used previously
      ),
      home: Builder(builder: (context) {
        // while AuthService is loading data
        if (auth.isLoading) {
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }

        // not logged in => show login (phone) screen
        if (auth.user == null) {
          return const LoginPhoneScreen();
        }

        // logged in but role not set => force role selection
        final role = auth.profile?['role'];
        if (role == null) {
          return const RoleSelectScreen();
        }

        // role exists => route to driver or rider
        if (role == 'driver') return const DriverHome();
        return const RiderHome();
      }),
    );
  }
}
